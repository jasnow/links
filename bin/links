#!/usr/bin/env ruby
require "links"
require "rainbow"
require 'getoptlong'

opts = GetoptLong.new(
  [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
  [ '--version', '-v', GetoptLong::NO_ARGUMENT ],
  [ '--bulk', '-b', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--proxy', '-P',  GetoptLong::REQUIRED_ARGUMENT ],
  [ '--code', '-c', GetoptLong::NO_ARGUMENT ],
  [ '--robots', '-r', GetoptLong::NO_ARGUMENT ]
)

trap("INT") { puts '['+'INTERRUPTED'.color(:red)+']'; exit -1 }
list=[]
robots=false
bulk=false
show_code=false
proxy={:host=>nil, :port=>-1}

opts.each do |opt, arg|
  case opt
  when '--help'
    puts "usage: links [-bvh] [filename]"
    puts "   -b filename: loads the url list from a plain text file"
    puts "   -r : parse robots.txt and make requests to disallowed urls"
    puts "   -c : shows the return code instead of human readable answer"
    puts "   -P host:port : connect using a proxy server. Useful in combination with Paros, Owasp Zap and other"
    puts "   -v : shows version information"
    puts "   -h : shows this help"
    exit 0
  when '--version'
    puts "links #{Links::Version.version}"
    exit 0
  when '--code'
    show_code = true
  when '--proxy'
    proxy[:host]=arg.split(':')[0]
    proxy[:port]=arg.split(':')[1].to_i
  when '--robots'
    robots=true
  when '--bulk'
    bulk=true
    if ! File.exists?(arg)
      puts "links: file not found (#{arg})".color(:red)
      exit 1
    end
    list = File.open(arg).readlines
    if list.count <= 0
      puts "links: invalid url list".color(:red)
      exit 1
    end
  end
end

target = ARGV[0]

if list.count == 0
  list<<target
end

if list[0].nil?
  puts "links: missing target".color(:red)
  exit 1
end

if robots
  list = Links::Api.robots(target)
end

list.each do |l|
  if robots or bulk
    if ! l.start_with? '/'
      l = '/'+l.chomp
    end
    if ! target.start_with? 'http://' and ! target.start_with? 'https://'
      #defaulting to HTTP when no protocol has been supplied
      target = "http://"+target
    end

    #puts "T: #{target}"
    #puts "L: #{l}"
    print "#{target}#{l}:".color(:white)
    code = Links::Api.code(target+l, proxy)
  else
    print "#{l}:".color(:white)
    code = Links::Api.code(l, proxy)
  end

  str=Links::Api.human(code)

  case str
  when "Open"
    if (show_code)
      print " #{code}\n".color(:green)
    else
      print " #{str}\n".color(:green)
    end
  when "Non existent"
    if (show_code)
      print " #{code}\n".color(:red)
    else
      print " #{str}\n".color(:red)
    end
  when "Closed"
    if (show_code)
    print " #{code}\n".color(:red)
    else
    print " #{str}\n".color(:red)
    end
  else
    if (show_code)
      print " #{code}\n".color(:yellow)
    else
      print " #{str}\n".color(:yellow)
    end
  end

  if code == 301 or code == 302
    new_link = Links::Api.follow(l, proxy)
    printf "following from #{l} to #{new_link}\n".color(:grey)
    str=Links::Api.human(code)

    case str
    when "Open"
      if (show_code)
        print " #{code}\n".color(:green)
      else
        print " #{str}\n".color(:green)
      end
    when "Non existent"
      if (show_code)
        print " #{code}\n".color(:red)
      else
        print " #{str}\n".color(:red)
      end
    when "Closed"
      if (show_code)
        print " #{code}\n".color(:red)
      else
        print " #{str}\n".color(:red)
      end
    else
      if (show_code)
        print " #{code}\n".color(:yellow)
      else
        print " #{str}\n".color(:yellow)
      end
    end

  end

end
